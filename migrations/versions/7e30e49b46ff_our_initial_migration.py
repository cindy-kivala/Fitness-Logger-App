from alembic import op
import sqlalchemy as sa

# Revision identifiers, used by Alembic
revision = 'create_exercises_table'
down_revision = None 
branch_labels = None
depends_on = None

def upgrade():
    op.create_table(
        'exercises',
        sa.Column('id', sa.Integer, primary_key=True),
        sa.Column('name', sa.String, nullable=False),
        sa.Column('description', sa.String), 
    )

def downgrade():
    op.drop_table('exercises')





# """Our Initial migration

# Revision ID: 7e30e49b46ff
# Revises: 
# Create Date: 2025-08-26 22:24:20.900537

# """
# from typing import Sequence, Union
# from alembic import op
# import sqlalchemy as sa
# from sqlalchemy import inspect


# # revision identifiers, used by Alembic.
# revision: str = '7e30e49b46ff'
# down_revision: Union[str, None] = None
# branch_labels: Union[str, Sequence[str], None] = None
# depends_on: Union[str, Sequence[str], None] = None


# def upgrade() -> None:
#     # ### commands auto generated by Alembic - please adjust! ###
#     conn = op.get_bind()
#     inspector = inspect(conn)

#     # Create table only if it doesn't exist
#     if 'workout_session_exercises' not in inspector.get_table_names():
#         op.create_table(
#             'workout_session_exercises',
#             sa.Column('id', sa.Integer(), nullable=False),
#             sa.Column('session_id', sa.Integer(), nullable=False),
#             sa.Column('exercise_id', sa.Integer(), nullable=False),
#             sa.ForeignKeyConstraint(['exercise_id'], ['exercises.id']),
#             sa.ForeignKeyConstraint(['session_id'], ['workout_sessions.id']),
#             sa.PrimaryKeyConstraint('id')
#         )

#     # Drop table only if it exists
#     if 'session_exercises' in inspector.get_table_names():
#         op.drop_table('session_exercises')

#     if 'workoutsessions' in inspector.get_table_names():
#         op.drop_table('workoutsessions')

#     # Add new column if not already present
#     if 'description' not in [col['name'] for col in inspector.get_columns('exercises')]:
#         op.add_column('exercises', sa.Column('description', sa.String(), nullable=True))

#     # Drop columns only if they exist
#     exercise_cols = [col['name'] for col in inspector.get_columns('exercises')]
#     if 'equipment' in exercise_cols:
#         op.drop_column('exercises', 'equipment')
#     if 'muscle_group' in exercise_cols:
#         op.drop_column('exercises', 'muscle_group')

#     ws_cols = [col['name'] for col in inspector.get_columns('workout_sessions')]
#     for col in ['calories', 'duration', 'activity']:
#         if col in ws_cols:
#             op.drop_column('workout_sessions', col)
#     # ### end Alembic commands ###


# def downgrade() -> None:
#     # ### commands auto generated by Alembic - please adjust! ###
#     op.add_column('workout_sessions', sa.Column('activity', sa.TEXT(), nullable=False))
#     op.add_column('workout_sessions', sa.Column('duration', sa.INTEGER(), nullable=False))
#     op.add_column('workout_sessions', sa.Column('calories', sa.INTEGER(), nullable=False))
#     # op.alter_column('workout_sessions', 'date',
#     #            existing_type=sa.DateTime(),
#     #            type_=sa.TEXT(),
#     #            nullable=False)
#     # op.alter_column('workout_sessions', 'user_id',
#     #            existing_type=sa.INTEGER(),
#     #            nullable=True)
#     # op.alter_column('workout_sessions', 'id',
#     #            existing_type=sa.INTEGER(),
#     #            nullable=True,
#     #            autoincrement=True)
#     # op.alter_column('users', 'weight',
#     #            existing_type=sa.Float(),
#     #            type_=sa.REAL(),
#     #            existing_nullable=True)
#     # op.alter_column('users', 'name',
#     #            existing_type=sa.String(),
#     #            type_=sa.TEXT(),
#     #            existing_nullable=False)
#     # op.alter_column('users', 'id',
#     #            existing_type=sa.INTEGER(),
#     #            nullable=True,
#     #            autoincrement=True)
#     op.add_column('exercises', sa.Column('muscle_group', sa.TEXT(), nullable=False))
#     op.add_column('exercises', sa.Column('equipment', sa.TEXT(), nullable=False))
#     # op.alter_column('exercises', 'name',
#     #            existing_type=sa.String(),
#     #            type_=sa.TEXT(),
#     #            existing_nullable=False)
#     # op.alter_column('exercises', 'id',
#     #            existing_type=sa.INTEGER(),
#     #            nullable=True,
#     #            autoincrement=True)
#     op.drop_column('exercises', 'description')
#     op.create_table('workoutsessions',
#     sa.Column('id', sa.INTEGER(), nullable=True),
#     sa.Column('user_id', sa.INTEGER(), nullable=True),
#     sa.Column('activity', sa.TEXT(), nullable=True),
#     sa.Column('duration', sa.INTEGER(), nullable=True),
#     sa.Column('calories', sa.INTEGER(), nullable=True),
#     sa.Column('date', sa.TEXT(), nullable=True),
#     sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
#     sa.PrimaryKeyConstraint('id')
#     )
#     op.create_table('session_exercises',
#     sa.Column('id', sa.INTEGER(), nullable=True),
#     sa.Column('session_id', sa.INTEGER(), nullable=True),
#     sa.Column('exercise_id', sa.INTEGER(), nullable=True),
#     sa.Column('sets', sa.INTEGER(), nullable=True),
#     sa.Column('reps', sa.INTEGER(), nullable=True),
#     sa.Column('weight', sa.REAL(), nullable=True),
#     sa.ForeignKeyConstraint(['exercise_id'], ['exercises.id'], ),
#     sa.ForeignKeyConstraint(['session_id'], ['workout_sessions.id'], ),
#     sa.PrimaryKeyConstraint('id')
#     )
#     op.drop_table('workout_session_exercises')
#     # ### end Alembic commands ###
